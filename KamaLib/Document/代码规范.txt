KamaLib代码规范
==========================
作者：Tramper 2009-12-10
邮件：linzhenqun@gmail.com


===============================================================================
代码文件的命名与分布
===============================================================================
1.  以Km开头的驼峰式命名，后面用“名词”或“形容词＋名词”的形式，如 KmRender，
    文件名尾部可能有后缀，以表明文件里面的代码的用途，下面是常用的后缀：
    * Utils：是常用函数的集合，比如字符串函数集为：KmStringUtils。
    * Consts：用于声明常量，比如：KmMsgConsts。
    * Helper：辅助类或函数集，用于简化某些用法，如第三方库的使用: KmGdipHelper
    
2.  文件中的代码一般为一种应用类型，比如时间函数，字符串函数，Com应用例程等，与
    传统不同，库的文件不要过多，一个文件包含某一大类的函数或类集合。比如，视图
    框架的代码全部放在 KmViews 文件里，包括类型定义和常量定义，尽量减少对于外部
    文件的依赖。整个库的文件都放在同一目录下，单元测试代码放在另一个目录下。
    
3.  通用的函数集或工具类写在头文件里，比如KmComUtils.h，框架性的代码可能会涉及
    到全局变量，分成cpp和h文件。比如KmViews.h, KmViews.cpp。

===============================================================================
代码文件的格式
===============================================================================
1.  H文件，以KmViews.h为例：
    /***********************************************************
      Filename:	KmViews.h
      Author:	Tramper
      Email:	linzhenqun@gmail.com
      Date:		2009/12/14

      Brief:    这是KamaLib代码库的一部分，由Tramper创建并维护，
    			版权没有，请自由使用！
    ***********************************************************/
    #ifdef  __KAMA_KMVIEWS_H__
    #define __KAMA_KMVIEWS_H__

    /*=======================================================================
       说明：
       TODO：
       。。。 。。。
    =========================================================================*/
    
    namespace kama
    {
    。。。 。。。
    }
    #endif //__KAMA_KMVIEWS_H__

2.  CPP文件，以KmViews.h为例：
    #include "stdafx.h"
    #include "KmViews.h"
    namespace kama
    {
    。。。 。。。
    }

============================================================================
类，结构，接口的命名
============================================================================
1.  以K开头，用 "名词" 或 "形容词＋名词" 的形式，例如：KObject, KScreen,  
    KView, KResManager

2.  结构一般是对数据的分类组织，所以常用的**Info，**Data等结尾，表明它是某一
    类数据，或某一类信息等。

3.  接口以I开头，用 "名词" 或 "形容词＋名词" 的形式，例如：IRunner

============================================================================
函数的命名
============================================================================
1.  函数名使用“动词”或“动词＋名词”或“名词"的形式。例如：Erase()，Open()

2.  事件类型的函数一般以On开头

3.  对于Get类型的函数，根据返回的类型作不同的命名：
    返回布尔值的函数，其语义一般是“有没有”，“是不是”，因此命名为Has, Is:
    IsVisible, IsEnable, IsChanged, HasConfig, HasFool等。
    返回其他类型的话，去除Get前缀，直接返回名词:
    Width, Height, Count

4.  对于Set类型的函数，加上Set前缀：
    SetWidth, SetCount, SetVisible, SetEnable
    Has类型的一般是只读，因此不会有Set的出现。

============================================================================
枚举和常量
============================================================================
1.  枚举的类型定义以K开头，用 "名词" 或 "形容词＋名词" 的形式；枚举值以枚举
    类型名缩写开头：
    enum KDrawMode 
    { 
        dmNone, 
        dmBlend, 
        dmAdd 
    };

2.  全部大写，词间以 _ 分隔：NT_MOUSEDOWN

============================================================================
变量命名
============================================================================
1.  类或结构的成员变量以m开头, 不加类型前缀，mEnable, mCount, mChildList。

2.  全局变量以g开头，不加类型前缀，gObjectManager, gApplication。

3.  静态变量以s开头，不加类型前缀，sList, sMember。

4.  局部变量或函数参数第一个词小写，后面词首字母大写，name, maxCount, small，
    ptrDest, ptrSource。

5.  索引的整形变量思考以用i, j, k等简单字母。

============================================================================
注释规则
============================================================================
1.  文件头注释，请看“代码文件的格式”一节。

2.  自定义类型（类，结构等）注释，在类型定义前面用 /* */ 注释，写清楚类型的
    职责，以及一些应该注意的地方。

3.  函数注释，在函数声明上面用 /* */ 注释, 格式没有严格规定, 交待清函数,参数,
    返回值的作用即可.

4.  变量注释，在变量名后面用 // 注释

5.  TODO注释：// TODO(Tramper): 还未实现。。。。。。

6.  代码注释，单行和多行都用 //， 注释行与前面空一行。